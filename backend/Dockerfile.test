# backend/Dockerfile.test

# Use the same specific Debian release tag as the main Dockerfile
FROM python:3.11-slim-bookworm AS backend-test 

# Update OS packages
RUN apt-get update && apt-get upgrade -y && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory inside the container
WORKDIR /app

# --- Requirements Section ---
# Copy ONLY the requirements files first to leverage Docker cache
# These paths are relative to the build context (./backend)
COPY requirements.txt test-requirements.txt ./
# Install Python dependencies including test requirements
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt -r test-requirements.txt

# --- Application Code Section ---
# Copy the rest of the application code from the build context (.) 
# into the container's WORKDIR (/app)
COPY . . 

# --- Environment Setup ---
# Ensure Python can find modules within the /app directory
ENV PYTHONPATH=/app

# --- Test Execution Command ---
# Run pytest:
# -vv: More verbose output
# --cov=.: Generate coverage report for the current directory (/app) and subdirectories
# tests/: Specify the directory containing the tests (which will be /app/tests/)
CMD ["pytest", "-vv", "--cov=.", "tests/"]